
#Python console is present in the bottom left of python output window and is used just to check the functionality of the program


type:
 >>>dev_id_search(20,l)

Traceback (most recent call last):  
  File "<input>", line 1, in <module>
NameError: name 'dev_id_search' is not defined

 #if such an error comes then copy the dev_id_search() and pate it here,now run the code again

>>>def dev_id_search(dev_id,dev_list):
...    if dev_id in dev_list:
...        return 'DevID found, Dev Id='+str(dev_id)+'Index='+str(dev_list.index(dev_id))
...    elif dev_id>max(dev_list):
...        return 'Not Found'
...    else:
...        for i in dev_list:
...            if i>dev_id:
...                return 'Val='+str(i)+' index='+str(dev_list.index(i))
...
>>>l=[10,20,30]
>>>dev_id_search(20,l)

'DevID found, Dev Id=20Index=1'

>>>dev_id_search(20)

Traceback (most recent call last):
  File "<input>", line 1, in <module>
TypeError: dev_id_search() missing 1 required positional argument: 'dev_list'

-----------------------------------------
#Along with the comments in the asst_1_function program add these codes

'''
Using functional programming
by passing the id and list as arguments

#executing in python console:
>>> l=[10,20,30]
>>> dev_id_search(20,l)
'DevID found, Dev Id=20Index=1'
>>> dev_id_search(20)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
TypeError: dev_id_search() missing 1 required positional argument: 'dev_list'
'''
#now add the following :

f __name__=='__main__':
    #main()- comment out main
    import doctest
    doctest.testmod()
#no o/p 

---------------------------------------
It indicates the console code (with >>>)is working correctly

what the testmod is doing is:

1.it first executes each command in the comment
2.then it compares the produced o/p and the o/p mentioned ni the comment
3.if it matches no o/p s shown indicating that the code block is correct
4.else it will throw the detailed error description

----------------------------------------
#now just change the value to 50 and check:

>>> dev_id_search(50,l)

o/p:#errors are shown 

"C:\Python Training\myvenv1\Scripts\python.exe" "C:/Python Training/bin/asst_1_function.py"
**********************************************************************
File "C:/Python Training/bin/asst_1_function.py", line 7, in __main__
Failed example:
    dev_id_search(50,l)
Expected:
    'DevID found, Dev Id=20Index=1'
Got:
    'Not Found'
**********************************************************************
1 items had failures:
   1 of   3 in __main__
***Test Failed*** 1 failures.

Process finished with exit code 0


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
final code structure for reference:


'''
Using functional programming
by passing the id and list as arguments

#executing in python console:
>>> l=[10,20,30]
>>> dev_id_search(50,l)
'DevID found, Dev Id=20Index=1'
>>> dev_id_search(20)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
TypeError: dev_id_search() missing 1 required positional argument: 'dev_list'
'''
def dev_id_search(dev_id,dev_list):
    if dev_id in dev_list:
        return 'DevID found, Dev Id='+str(dev_id)+'Index='+str(dev_list.index(dev_id))
    elif dev_id>max(dev_list):
        return 'Not Found'
    else:
        for i in dev_list:
            if i>dev_id:
                return 'Val='+str(i)+' index='+str(dev_list.index(i))

def main():
    list1 = [1, 3, 5, 16, 8]
    list2 = [6, 5, 9, 4, 13, 12]
    list3 = list1 + list2
    s=set(list3)
    list4=list(s)
    list4.sort()
    while True:
        i=input('Enter the id: ')
        i=eval(i)
        r=dev_id_search(i,list4)
        print('search result=',r)
        ch=input('Do you want to continue(y/n)')
        if ch=='n':
            break


if __name__=='__main__':
    #main()
    import doctest
    doctest.testmod()
--------------------------------------------------

o/p when main() is not commented along with passing wrong values in console code

"C:\Python Training\myvenv1\Scripts\python.exe" "C:/Python Training/bin/asst_1_function.py"
Enter the id: 3
search result= DevID found, Dev Id=3Index=1
Do you want to continue(y/n)y
Enter the id: 12
search result= DevID found, Dev Id=12Index=7
Do you want to continue(y/n)y
Enter the id: 17
search result= Not Found
Do you want to continue(y/n)n
**********************************************************************
File "C:/Python Training/bin/asst_1_function.py", line 7, in __main__
Failed example:
    dev_id_search(50,l)
Expected:
    'DevID found, Dev Id=20Index=1'
Got:
    'Not Found'
**********************************************************************
1 items had failures:
   1 of   3 in __main__
***Test Failed*** 1 failures.

Process finished with exit code 0