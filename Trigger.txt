Program:

create a trigger:

create or replace trigger secure_emp
   before insert on emp
begin
if(TO_CHAR(SYSDATE,'DY') in ('SAT','SUN')) OR
(TO_CHAR(SYSDATE,'HH24:MI')
NOT BETWEEN '08:00' AND '18:00') THEN
RAISE_APPLICATION_ERROR(-20500,'You may insert'||'into emp table only during'||' normal business hours.');
END IF;
END;
/

Output:

Trigger created

=>

SQL> insert into emp values(7777,'SAM','CLERK',7892,'4-JAN-20',8000,700,10);

Output:

insert into emp values(7777,'SAM','CLERK',7892,'4-JAN-20',8000,700,10)
            *
ERROR at line 1:
ORA-20500: You may insertinto emp table only duringnormal business hours.
ORA-06512: at "SCOTT.SECURE_EMP", line 5
ORA-04088: error during execution of trigger 'SCOTT.SECURE_EMP'

=>

SQL> set linesize 120;
SQL> set pagesize 120;
SQL> select * from emp;

Output:

     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM     DEPTNO
---------- ---------- --------- ---------- --------- ---------- ---------- ----------
      7369 SMITH      CLERK           7902 17-DEC-80        800                    20
      7499 ALLEN      SALESMAN        7698 20-FEB-81       1600        300         30
      7521 WARD       SALESMAN        7698 22-FEB-81       1250        500         30
      7566 JONES      MANAGER         7839 02-APR-81       2975                    20
      7654 MARTIN     SALESMAN        7698 28-SEP-81       1250       1400         30
      7698 BLAKE      MANAGER         7839 01-MAY-81       2850                    30
      7782 CLARK      MANAGER         7839 09-JUN-81       2450                    10
      7788 SCOTT      ANALYST         7566 19-APR-87       3000                    20
      7839 KING       PRESIDENT            17-NOV-81       5000                    10
      7844 TURNER     SALESMAN        7698 08-SEP-81       1500          0         30
      7876 ADAMS      CLERK           7788 23-MAY-87       1100                    20
      7900 JAMES      CLERK           7698 03-DEC-81        950                    30
      7902 FORD       ANALYST         7566 03-DEC-81       3000                    20
      7934 MILLER     CLERK           7782 23-JAN-82       1300                    10

14 rows selected.



Creating a DML row trigger:

create or replace trigger restrict_salary
before insert or update of sal on emp
for each row
begin
if not (:NEW.job IN ('analyst','PRESIDENT'))
and :NEW.sal >6000 then
raise_application_error(-20202,
'Employee cannot earn more than 15,000');
end if;
end;
/

Output:
Trigger created

=>

SQL> update emp set sal='7000' where ename='SMITH';

Output:
update emp set sal='7000' where ename='SMITH'
       *
ERROR at line 1:
ORA-20202: Employee cannot earn more than 15,000
ORA-06512: at "SCOTT.RESTRICT_SALARY", line 4
ORA-04088: error during execution of trigger 'SCOTT.RESTRICT_SALARY'



Using old and new Qualifiers:

create table audit_user(username varchar2(20),time_stamp date,id number(6),old_lastname varchar2(25),new_lastname varchar2(25),old_salary number(8,2),salary_new number(8,2));

Output:
Table created.

=>
SQL> create or replace trigger audit_values
    after delete or insert or update on emp
    for each row
    begin
    insert into audit_emp(username,time_stamp,id,old_lastname,new_lastname,old_salary,new_salary) values(user,SYSDATE,:OLD.empno,:OLD.lastname,:NEW.lastname,:OLD.salary,:NEW.salary);
    end;
    /

output:
Warning: Trigger created with compilation errors.
=>
SQL> show error;

Output:
Errors for TRIGGER AUDIT_VALUES:

LINE/COL ERROR
-------- -----------------------------------------------------------------
2/126    PLS-00049: bad bind variable 'OLD.LASTNAME'
2/140    PLS-00049: bad bind variable 'NEW.LASTNAME'
2/154    PLS-00049: bad bind variable 'OLD.SALARY'
2/166    PLS-00049: bad bind variable 'NEW.SALARY'
=>
SQL> create or replace trigger audit_values
    after delete or insert or update on emp
    for each row
    begin
    insert into audit_user(username,time_stamp,id,old_lastname,new_lastname,old_salary,new_salary) values(user,SYSDATE,:OLD.empno,:OLD.ename,:NEW.ename,:OLD.sal,:NEW.sal);
    end;
    /

Output:
Warning: Trigger created with compilation errors.
=>
SQL> show error;

Output:
Errors for TRIGGER AUDIT_VALUES:

LINE/COL ERROR
-------- -----------------------------------------------------------------
2/1      PL/SQL: SQL Statement ignored
2/84     PL/SQL: ORA-00904: "NEW_SALARY": invalid identifier
=>
SQL> create or replace trigger audit_values
  2  after delete or insert or update on emp
  3  for each row
  4  begin
  5  insert into audit_user(username,time_stamp,id,old_lastname,new_lastname,old_salary,salary_new) values(user,SYSDATE,:OLD.empno,:OLD.ename,:NEW.ename,:OLD.sal,:NEW.sal);
  6  end;
  7  /

Output:
Trigger created.

=>
SQL> update emp set sal='10000' where deptno=10;

Output:
update emp set sal='10000' where deptno=10
       *
ERROR at line 1:
ORA-20202: Employee cannot earn more than 15,000
ORA-06512: at "SCOTT.RESTRICT_SALARY", line 4
ORA-04088: error during execution of trigger 'SCOTT.RESTRICT_SALARY'

=>
SQL> update emp set sal='1000' where deptno=10;

Output:
3 rows updated.

=>
SQL> select * from emp;

Output:
     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM     DEPTNO
---------- ---------- --------- ---------- --------- ---------- ---------- ----------
      7369 SMITH      CLERK           7902 17-DEC-80       4000                    20
      7499 ALLEN      SALESMAN        7698 20-FEB-81       1600        300         30
      7521 WARD       SALESMAN        7698 22-FEB-81       1250        500         30
      7566 JONES      MANAGER         7839 02-APR-81       2975                    20
      7654 MARTIN     SALESMAN        7698 28-SEP-81       1250       1400         30
      7698 BLAKE      MANAGER         7839 01-MAY-81       2850                    30
      7782 CLARK      MANAGER         7839 09-JUN-81       1000                    10
      7788 SCOTT      ANALYST         7566 19-APR-87       3000                    20
      7839 KING       PRESIDENT            17-NOV-81       1000                    10
      7844 TURNER     SALESMAN        7698 08-SEP-81       1500          0         30
      7876 ADAMS      CLERK           7788 23-MAY-87       1100                    20
      7900 JAMES      CLERK           7698 03-DEC-81        950                    30
      7902 FORD       ANALYST         7566 03-DEC-81       4000                    20
      7934 MILLER     CLERK           7782 23-JAN-82       1000                    10

14 rows selected.

=>
SQL> select * from audit_user;

Output:
USERNAME             TIME_STAM         ID OLD_LASTNAME              NEW_LASTNAME              OLD_SALARY SALARY_NEW
-------------------- --------- ---------- ------------------------- ------------------------- ---------- ----------
SCOTT                03-JAN-20       7782 CLARK                     CLARK                           2450       1000
SCOTT                03-JAN-20       7839 KING                      KING                            4000       1000
SCOTT                03-JAN-20       7934 MILLER                    MILLER                          1300       1000



Masterdetail report generator:


SQL> set serveroutput on;
SQL> declare
        cursor c1 is select * from dept;
        cursor c2(pdno number) is select * from emp where deptno=pdno;
        begin
        for vdep in c1
        loop
        dbms_output.put_line('-----------------');
        dbms_output.put_line(vdep.deptno||' '||vdep.dname);
        dbms_output.put_line('-----------------');
        for erec in c2(vdep.deptno)
        loop
        dbms_output.put_line(erec.empno||' ' ||erec.ename||' ' ||erec.deptno);
        end loop;
        end loop;
        end;
        /

Output:

-----------------
10 ACCOUNTING
-----------------
7782 CLARK 10
7839 KING 10
7934 MILLER 10
-----------------
20 RESEARCH
-----------------
7369 SMITH 20
7566 JONES 20
7788 SCOTT 20
7876 ADAMS 20
7902 FORD 20
-----------------
30 SALES
-----------------
7499 ALLEN 30
7521 WARD 30
7654 MARTIN 30
7698 BLAKE 30
7844 TURNER 30
7900 JAMES 30
-----------------
40 OPERATIONS
-----------------

PL/SQL procedure successfully completed.


logoff and logon triggers:

SQL> create table log_trig_table(user_id varchar2(10),log_date date,action varchar2(20));

Output:
Table created.

=>
SQL> create or replace trigger logon_trig
  2  after logon on schema
  3  begin
  4  insert into log_trig_table(user_id,log_date,action)
  5  values(user,sysdate,'Logging on');
  6  end;
  7  /

Output:
Trigger created.

=>
SQL> create or replace trigger logoff_trig
  2  before logoff on schema
  3  begin
  4  insert into log_trig_table(user_id,log_date,action)
  5  values(user,sysdate,'Logging off');
  6  end;
  7  /

Output:

Trigger created.

=>
SQL> select * from log_trig_table;

Output:

USER_ID    LOG_DATE  ACTION
---------- --------- --------------------
SCOTT      03-JAN-20 Logging off
SCOTT      03-JAN-20 Logging on
